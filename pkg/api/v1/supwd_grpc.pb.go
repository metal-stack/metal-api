// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SuperUserPasswordClient is the client API for SuperUserPassword service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuperUserPasswordClient interface {
	FetchSuperUserPassword(ctx context.Context, in *SuperUserPasswordRequest, opts ...grpc.CallOption) (*SuperUserPasswordResponse, error)
}

type superUserPasswordClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperUserPasswordClient(cc grpc.ClientConnInterface) SuperUserPasswordClient {
	return &superUserPasswordClient{cc}
}

func (c *superUserPasswordClient) FetchSuperUserPassword(ctx context.Context, in *SuperUserPasswordRequest, opts ...grpc.CallOption) (*SuperUserPasswordResponse, error) {
	out := new(SuperUserPasswordResponse)
	err := c.cc.Invoke(ctx, "/api.v1.SuperUserPassword/FetchSuperUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuperUserPasswordServer is the server API for SuperUserPassword service.
// All implementations should embed UnimplementedSuperUserPasswordServer
// for forward compatibility
type SuperUserPasswordServer interface {
	FetchSuperUserPassword(context.Context, *SuperUserPasswordRequest) (*SuperUserPasswordResponse, error)
}

// UnimplementedSuperUserPasswordServer should be embedded to have forward compatible implementations.
type UnimplementedSuperUserPasswordServer struct {
}

func (UnimplementedSuperUserPasswordServer) FetchSuperUserPassword(context.Context, *SuperUserPasswordRequest) (*SuperUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSuperUserPassword not implemented")
}

// UnsafeSuperUserPasswordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperUserPasswordServer will
// result in compilation errors.
type UnsafeSuperUserPasswordServer interface {
	mustEmbedUnimplementedSuperUserPasswordServer()
}

func RegisterSuperUserPasswordServer(s grpc.ServiceRegistrar, srv SuperUserPasswordServer) {
	s.RegisterService(&SuperUserPassword_ServiceDesc, srv)
}

func _SuperUserPassword_FetchSuperUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuperUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperUserPasswordServer).FetchSuperUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.SuperUserPassword/FetchSuperUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperUserPasswordServer).FetchSuperUserPassword(ctx, req.(*SuperUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuperUserPassword_ServiceDesc is the grpc.ServiceDesc for SuperUserPassword service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuperUserPassword_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.SuperUserPassword",
	HandlerType: (*SuperUserPasswordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchSuperUserPassword",
			Handler:    _SuperUserPassword_FetchSuperUserPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/supwd.proto",
}
