// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WaitClient is the client API for Wait service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WaitClient interface {
	// FIXME move to boot.proto
	Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (Wait_WaitClient, error)
}

type waitClient struct {
	cc grpc.ClientConnInterface
}

func NewWaitClient(cc grpc.ClientConnInterface) WaitClient {
	return &waitClient{cc}
}

func (c *waitClient) Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (Wait_WaitClient, error) {
	stream, err := c.cc.NewStream(ctx, &Wait_ServiceDesc.Streams[0], "/api.v1.Wait/Wait", opts...)
	if err != nil {
		return nil, err
	}
	x := &waitWaitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wait_WaitClient interface {
	Recv() (*KeepPatientResponse, error)
	grpc.ClientStream
}

type waitWaitClient struct {
	grpc.ClientStream
}

func (x *waitWaitClient) Recv() (*KeepPatientResponse, error) {
	m := new(KeepPatientResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WaitServer is the server API for Wait service.
// All implementations should embed UnimplementedWaitServer
// for forward compatibility
type WaitServer interface {
	// FIXME move to boot.proto
	Wait(*WaitRequest, Wait_WaitServer) error
}

// UnimplementedWaitServer should be embedded to have forward compatible implementations.
type UnimplementedWaitServer struct {
}

func (UnimplementedWaitServer) Wait(*WaitRequest, Wait_WaitServer) error {
	return status.Errorf(codes.Unimplemented, "method Wait not implemented")
}

// UnsafeWaitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WaitServer will
// result in compilation errors.
type UnsafeWaitServer interface {
	mustEmbedUnimplementedWaitServer()
}

func RegisterWaitServer(s grpc.ServiceRegistrar, srv WaitServer) {
	s.RegisterService(&Wait_ServiceDesc, srv)
}

func _Wait_Wait_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WaitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WaitServer).Wait(m, &waitWaitServer{stream})
}

type Wait_WaitServer interface {
	Send(*KeepPatientResponse) error
	grpc.ServerStream
}

type waitWaitServer struct {
	grpc.ServerStream
}

func (x *waitWaitServer) Send(m *KeepPatientResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Wait_ServiceDesc is the grpc.ServiceDesc for Wait service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wait_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Wait",
	HandlerType: (*WaitServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Wait",
			Handler:       _Wait_Wait_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/wait.proto",
}
