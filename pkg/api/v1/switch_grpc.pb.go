// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/switch.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SwitchService_PortUp_FullMethodName   = "/api.v1.SwitchService/PortUp"
	SwitchService_PortDown_FullMethodName = "/api.v1.SwitchService/PortDown"
)

// SwitchServiceClient is the client API for SwitchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwitchServiceClient interface {
	PortUp(ctx context.Context, in *SwitchServicePortUpRequest, opts ...grpc.CallOption) (*SwitchServicePortUpResponse, error)
	PortDown(ctx context.Context, in *SwitchServicePortDownRequest, opts ...grpc.CallOption) (*SwitchServicePortDownResponse, error)
}

type switchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwitchServiceClient(cc grpc.ClientConnInterface) SwitchServiceClient {
	return &switchServiceClient{cc}
}

func (c *switchServiceClient) PortUp(ctx context.Context, in *SwitchServicePortUpRequest, opts ...grpc.CallOption) (*SwitchServicePortUpResponse, error) {
	out := new(SwitchServicePortUpResponse)
	err := c.cc.Invoke(ctx, SwitchService_PortUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchServiceClient) PortDown(ctx context.Context, in *SwitchServicePortDownRequest, opts ...grpc.CallOption) (*SwitchServicePortDownResponse, error) {
	out := new(SwitchServicePortDownResponse)
	err := c.cc.Invoke(ctx, SwitchService_PortDown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwitchServiceServer is the server API for SwitchService service.
// All implementations should embed UnimplementedSwitchServiceServer
// for forward compatibility
type SwitchServiceServer interface {
	PortUp(context.Context, *SwitchServicePortUpRequest) (*SwitchServicePortUpResponse, error)
	PortDown(context.Context, *SwitchServicePortDownRequest) (*SwitchServicePortDownResponse, error)
}

// UnimplementedSwitchServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSwitchServiceServer struct {
}

func (UnimplementedSwitchServiceServer) PortUp(context.Context, *SwitchServicePortUpRequest) (*SwitchServicePortUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortUp not implemented")
}
func (UnimplementedSwitchServiceServer) PortDown(context.Context, *SwitchServicePortDownRequest) (*SwitchServicePortDownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortDown not implemented")
}

// UnsafeSwitchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwitchServiceServer will
// result in compilation errors.
type UnsafeSwitchServiceServer interface {
	mustEmbedUnimplementedSwitchServiceServer()
}

func RegisterSwitchServiceServer(s grpc.ServiceRegistrar, srv SwitchServiceServer) {
	s.RegisterService(&SwitchService_ServiceDesc, srv)
}

func _SwitchService_PortUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchServicePortUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServiceServer).PortUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwitchService_PortUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServiceServer).PortUp(ctx, req.(*SwitchServicePortUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchService_PortDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchServicePortDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServiceServer).PortDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwitchService_PortDown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServiceServer).PortDown(ctx, req.(*SwitchServicePortDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SwitchService_ServiceDesc is the grpc.ServiceDesc for SwitchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwitchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.SwitchService",
	HandlerType: (*SwitchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PortUp",
			Handler:    _SwitchService_PortUp_Handler,
		},
		{
			MethodName: "PortDown",
			Handler:    _SwitchService_PortDown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/switch.proto",
}
