{
  "basePath": "/",
  "definitions": {
    "httperrors.HTTPErrorResponse": {
      "properties": {
        "message": {
          "description": "error message",
          "type": "string"
        },
        "statuscode": {
          "description": "http status code",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "message",
        "statuscode"
      ]
    },
    "rest.status": {
      "properties": {
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "required": [
        "message",
        "status"
      ]
    },
    "rest.version": {
      "properties": {
        "builddate": {
          "type": "string"
        },
        "gitsha1": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "revision": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "builddate",
        "gitsha1",
        "name",
        "revision",
        "version"
      ]
    },
    "timestamp.Timestamp": {
      "properties": {
        "nanos": {
          "format": "int32",
          "type": "integer"
        },
        "seconds": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "v1.BGPFilter": {
      "properties": {
        "cidrs": {
          "description": "the cidr addresses that are allowed to be announced at this switch port",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "vnis": {
          "description": "the virtual networks that are exposed at this switch port",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "cidrs"
      ]
    },
    "v1.BootInfo": {
      "properties": {
        "bootloaderid": {
          "description": "the bootloader ID",
          "type": "string"
        },
        "cmdline": {
          "description": "the cmdline",
          "type": "string"
        },
        "image_id": {
          "description": "the ID of the current image",
          "type": "string"
        },
        "initrd": {
          "description": "the initrd image",
          "type": "string"
        },
        "kernel": {
          "description": "the kernel",
          "type": "string"
        },
        "os_partition": {
          "description": "the partition containing the OS",
          "type": "string"
        },
        "primary_disk": {
          "description": "the primary disk",
          "type": "string"
        }
      },
      "required": [
        "bootloaderid",
        "cmdline",
        "image_id",
        "initrd",
        "kernel",
        "os_partition",
        "primary_disk"
      ]
    },
    "v1.ChassisIdentifyLEDState": {
      "properties": {
        "description": {
          "description": "a description why this chassis identify LED is in the given state",
          "type": "string"
        },
        "value": {
          "description": "the state of this chassis identify LED. empty means LED-OFF",
          "type": "string"
        }
      },
      "required": [
        "description",
        "value"
      ]
    },
    "v1.EmptyBody": {},
    "v1.FirewallCreateRequest": {
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "ha": {
          "description": "if set to true, this firewall is set up in a High Available manner",
          "type": "boolean"
        },
        "hostname": {
          "description": "the hostname for the allocated machine (defaults to metal)",
          "type": "string"
        },
        "imageid": {
          "description": "the image id to assign this machine to",
          "type": "string"
        },
        "ips": {
          "description": "the ips to attach to this machine additionally",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "networks": {
          "description": "the networks that this machine will be placed in.",
          "items": {
            "$ref": "#/definitions/v1.MachineAllocationNetwork"
          },
          "type": "array"
        },
        "partitionid": {
          "description": "the partition id to assign this machine to",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to assign this machine to",
          "type": "string"
        },
        "sizeid": {
          "description": "the size id to assign this machine to",
          "type": "string"
        },
        "ssh_pub_keys": {
          "description": "the public ssh keys to access the machine with",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tags": {
          "description": "tags for this machine",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "user_data": {
          "description": "cloud-init.io compatible userdata must be base64 encoded",
          "type": "string"
        },
        "uuid": {
          "description": "if this field is set, this specific machine will be allocated if it is not in available state and not currently allocated. this field overrules size and partition",
          "type": "string"
        }
      },
      "required": [
        "imageid",
        "partitionid",
        "projectid",
        "sizeid",
        "ssh_pub_keys"
      ]
    },
    "v1.FirewallFindRequest": {
      "properties": {
        "allocation_hostname": {
          "type": "string"
        },
        "allocation_image_id": {
          "type": "string"
        },
        "allocation_name": {
          "type": "string"
        },
        "allocation_project": {
          "type": "string"
        },
        "allocation_succeeded": {
          "type": "boolean"
        },
        "disk_names": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "disk_sizes": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "fru_board_mfg": {
          "type": "string"
        },
        "fru_board_mfg_serial": {
          "type": "string"
        },
        "fru_board_part_number": {
          "type": "string"
        },
        "fru_chassis_part_number": {
          "type": "string"
        },
        "fru_chassis_part_serial": {
          "type": "string"
        },
        "fru_product_manufacturer": {
          "type": "string"
        },
        "fru_product_part_number": {
          "type": "string"
        },
        "fru_product_serial": {
          "type": "string"
        },
        "hardware_cpu_cores": {
          "format": "int64",
          "type": "integer"
        },
        "hardware_memory": {
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "ipmi_address": {
          "type": "string"
        },
        "ipmi_interface": {
          "type": "string"
        },
        "ipmi_mac_address": {
          "type": "string"
        },
        "ipmi_user": {
          "type": "string"
        },
        "liveliness": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "network_asns": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "network_destination_prefixes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "network_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "network_ips": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "network_nat": {
          "type": "boolean"
        },
        "network_prefixes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "network_private": {
          "type": "boolean"
        },
        "network_underlay": {
          "type": "boolean"
        },
        "network_vrfs": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "nics_mac_addresses": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nics_names": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nics_neighbor_mac_addresses": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nics_neighbor_names": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nics_neighbor_vrfs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nics_vrfs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "partition_id": {
          "type": "string"
        },
        "rackid": {
          "type": "string"
        },
        "sizeid": {
          "type": "string"
        },
        "state_value": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "allocation_hostname",
        "allocation_image_id",
        "allocation_name",
        "allocation_project",
        "allocation_succeeded",
        "disk_names",
        "disk_sizes",
        "fru_board_mfg",
        "fru_board_mfg_serial",
        "fru_board_part_number",
        "fru_chassis_part_number",
        "fru_chassis_part_serial",
        "fru_product_manufacturer",
        "fru_product_part_number",
        "fru_product_serial",
        "hardware_cpu_cores",
        "hardware_memory",
        "id",
        "ipmi_address",
        "ipmi_interface",
        "ipmi_mac_address",
        "ipmi_user",
        "liveliness",
        "name",
        "network_asns",
        "network_destination_prefixes",
        "network_ids",
        "network_ips",
        "network_nat",
        "network_prefixes",
        "network_private",
        "network_underlay",
        "network_vrfs",
        "nics_mac_addresses",
        "nics_names",
        "nics_neighbor_mac_addresses",
        "nics_neighbor_names",
        "nics_neighbor_vrfs",
        "nics_vrfs",
        "partition_id",
        "rackid",
        "sizeid",
        "state_value",
        "tags"
      ]
    },
    "v1.FirewallResponse": {
      "properties": {
        "allocation": {
          "$ref": "#/definitions/v1.MachineAllocation",
          "description": "the allocation data of an allocated machine"
        },
        "bios": {
          "$ref": "#/definitions/v1.MachineBIOS",
          "description": "bios information of this machine"
        },
        "changed": {
          "description": "the last changed timestamp of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "created": {
          "description": "the creation time of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "events": {
          "$ref": "#/definitions/v1.MachineRecentProvisioningEvents",
          "description": "recent events of this machine during provisioning"
        },
        "hardware": {
          "$ref": "#/definitions/v1.MachineHardware",
          "description": "the hardware of this machine"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "ledstate": {
          "$ref": "#/definitions/v1.ChassisIdentifyLEDState",
          "description": "the state of this chassis identify LED"
        },
        "liveliness": {
          "description": "the liveliness of this machine",
          "type": "string"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "partition": {
          "$ref": "#/definitions/v1.PartitionResponse",
          "description": "the partition assigned to this machine",
          "readOnly": true
        },
        "rackid": {
          "description": "the rack assigned to this machine",
          "readOnly": true,
          "type": "string"
        },
        "size": {
          "$ref": "#/definitions/v1.SizeResponse",
          "description": "the size of this machine",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/v1.MachineState",
          "description": "the state of this machine"
        },
        "tags": {
          "description": "tags for this machine",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "allocation",
        "bios",
        "changed",
        "created",
        "events",
        "hardware",
        "id",
        "ledstate",
        "liveliness",
        "partition",
        "rackid",
        "size",
        "state",
        "tags"
      ]
    },
    "v1.IPAllocateRequest": {
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "machineid": {
          "description": "the machine id this ip should be associated with",
          "type": "string"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "networkid": {
          "description": "the network this ip allocate request address belongs to",
          "type": "string"
        },
        "projectid": {
          "description": "the project this ip address belongs to",
          "type": "string"
        },
        "tags": {
          "description": "free tags that you associate with this ip.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "default": "static",
          "description": "the ip type, ephemeral leads to automatic cleanup of the ip address, static will enable re-use of the ip at a later point in time",
          "enum": [
            "ephemeral",
            "static"
          ],
          "type": "string"
        }
      },
      "required": [
        "machineid",
        "networkid",
        "projectid",
        "tags",
        "type"
      ]
    },
    "v1.IPFindRequest": {
      "properties": {
        "ipaddress": {
          "description": "the address (ipv4 or ipv6) of this ip",
          "type": "string"
        },
        "machineid": {
          "description": "the machine an ip address is associated to",
          "type": "string"
        },
        "networkid": {
          "description": "the network this ip allocate request address belongs to",
          "type": "string"
        },
        "networkprefix": {
          "description": "the prefix of the network this ip address belongs to",
          "type": "string"
        },
        "projectid": {
          "description": "the project this ip address belongs to, empty if not strong coupled",
          "type": "string"
        },
        "tags": {
          "description": "the tags that are assigned to this ip address",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "the type of the ip address, ephemeral or static",
          "type": "string"
        }
      },
      "required": [
        "ipaddress",
        "machineid",
        "networkid",
        "networkprefix",
        "projectid",
        "tags",
        "type"
      ]
    },
    "v1.IPResponse": {
      "properties": {
        "changed": {
          "description": "the last changed timestamp of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "created": {
          "description": "the creation time of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "ipaddress": {
          "description": "the address (ipv4 or ipv6) of this ip",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "networkid": {
          "description": "the network this ip allocate request address belongs to",
          "type": "string"
        },
        "projectid": {
          "description": "the project this ip address belongs to",
          "type": "string"
        },
        "tags": {
          "description": "free tags that you associate with this ip.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "default": "static",
          "description": "the ip type, ephemeral leads to automatic cleanup of the ip address, static will enable re-use of the ip at a later point in time",
          "enum": [
            "ephemeral",
            "static"
          ],
          "type": "string"
        }
      },
      "required": [
        "changed",
        "created",
        "ipaddress",
        "networkid",
        "projectid",
        "tags",
        "type"
      ]
    },
    "v1.IPUpdateRequest": {
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "ipaddress": {
          "description": "the address (ipv4 or ipv6) of this ip",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "tags": {
          "description": "free tags that you associate with this ip.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "the ip type, ephemeral leads to automatic cleanup of the ip address, static will enable re-use of the ip at a later point in time",
          "enum": [
            "ephemeral",
            "static"
          ],
          "type": "string"
        }
      },
      "required": [
        "ipaddress",
        "tags",
        "type"
      ]
    },
    "v1.ImageCreateRequest": {
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "features": {
          "description": "features of this image",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "url": {
          "description": "the url of this image",
          "type": "string"
        }
      },
      "required": [
        "id",
        "url"
      ]
    },
    "v1.ImageResponse": {
      "properties": {
        "changed": {
          "description": "the last changed timestamp of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "created": {
          "description": "the creation time of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "features": {
          "description": "features of this image",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "url": {
          "description": "the url of this image",
          "type": "string"
        }
      },
      "required": [
        "changed",
        "created",
        "id"
      ]
    },
    "v1.ImageUpdateRequest": {
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "features": {
          "description": "features of this image",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "url": {
          "description": "the url of this image",
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "v1.MachineAbortReinstallRequest": {
      "properties": {
        "primary_disk_wiped": {
          "description": "indicates whether the primary disk is already wiped",
          "type": "boolean"
        }
      },
      "required": [
        "primary_disk_wiped"
      ]
    },
    "v1.MachineAllocateRequest": {
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "hostname": {
          "description": "the hostname for the allocated machine (defaults to metal)",
          "type": "string"
        },
        "imageid": {
          "description": "the image id to assign this machine to",
          "type": "string"
        },
        "ips": {
          "description": "the ips to attach to this machine additionally",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "networks": {
          "description": "the networks that this machine will be placed in.",
          "items": {
            "$ref": "#/definitions/v1.MachineAllocationNetwork"
          },
          "type": "array"
        },
        "partitionid": {
          "description": "the partition id to assign this machine to",
          "type": "string"
        },
        "projectid": {
          "description": "the project id to assign this machine to",
          "type": "string"
        },
        "sizeid": {
          "description": "the size id to assign this machine to",
          "type": "string"
        },
        "ssh_pub_keys": {
          "description": "the public ssh keys to access the machine with",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tags": {
          "description": "tags for this machine",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "user_data": {
          "description": "cloud-init.io compatible userdata must be base64 encoded",
          "type": "string"
        },
        "uuid": {
          "description": "if this field is set, this specific machine will be allocated if it is not in available state and not currently allocated. this field overrules size and partition",
          "type": "string"
        }
      },
      "required": [
        "imageid",
        "partitionid",
        "projectid",
        "sizeid",
        "ssh_pub_keys"
      ]
    },
    "v1.MachineAllocation": {
      "properties": {
        "boot_info": {
          "$ref": "#/definitions/v1.BootInfo",
          "description": "information required for booting the machine from HD"
        },
        "console_password": {
          "description": "the console password which was generated while provisioning",
          "type": "string"
        },
        "created": {
          "description": "the time when the machine was created",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "a description for this machine",
          "type": "string"
        },
        "hostname": {
          "description": "the hostname which will be used when creating the machine",
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/v1.ImageResponse",
          "description": "the image assigned to this machine",
          "readOnly": true
        },
        "name": {
          "description": "the name of the machine",
          "type": "string"
        },
        "networks": {
          "description": "the networks of this machine",
          "items": {
            "$ref": "#/definitions/v1.MachineNetwork"
          },
          "type": "array"
        },
        "project": {
          "description": "the project id that this machine is assigned to",
          "type": "string"
        },
        "reinstall": {
          "description": "indicates whether to reinstall the machine",
          "type": "boolean"
        },
        "ssh_pub_keys": {
          "description": "the public ssh keys to access the machine with",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "succeeded": {
          "description": "if the allocation of the machine was successful, this is set to true",
          "type": "boolean"
        },
        "user_data": {
          "description": "userdata to execute post installation tasks",
          "type": "string"
        }
      },
      "required": [
        "created",
        "hostname",
        "name",
        "networks",
        "project",
        "reinstall",
        "ssh_pub_keys",
        "succeeded"
      ]
    },
    "v1.MachineAllocationNetwork": {
      "properties": {
        "autoacquire": {
          "description": "will automatically acquire an ip in this network if set to true, default is true",
          "type": "boolean"
        },
        "networkid": {
          "description": "the id of the network that this machine will be placed in",
          "type": "string"
        }
      },
      "required": [
        "autoacquire",
        "networkid"
      ]
    },
    "v1.MachineBIOS": {
      "description": "The bios version",
      "properties": {
        "date": {
          "description": "the bios date",
          "type": "string"
        },
        "vendor": {
          "description": "the bios vendor",
          "type": "string"
        },
        "version": {
          "description": "the bios version",
          "type": "string"
        }
      },
      "required": [
        "date",
        "vendor",
        "version"
      ]
    },
    "v1.MachineBlockDevice": {
      "properties": {
        "name": {
          "description": "the name of this block device",
          "type": "string"
        },
        "partitions": {
          "description": "the partitions of this disk",
          "items": {
            "$ref": "#/definitions/v1.MachineDiskPartition"
          },
          "type": "array"
        },
        "primary": {
          "description": "whether this disk has the OS installed",
          "type": "boolean"
        },
        "size": {
          "description": "the size of this block device",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "partitions",
        "primary",
        "size"
      ]
    },
    "v1.MachineDiskPartition": {
      "properties": {
        "device": {
          "description": "the partition device name, e.g. sda1",
          "type": "string"
        },
        "filesystem": {
          "description": "the partition filesystem",
          "type": "string"
        },
        "gptguid": {
          "description": "the partition GPT guid",
          "type": "string"
        },
        "gpttyoe": {
          "description": "the partition GPT type",
          "type": "string"
        },
        "label": {
          "description": "the partition label",
          "type": "string"
        },
        "mountoptions": {
          "description": "the partition mount options",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mountpoint": {
          "description": "the partition mount point",
          "type": "string"
        },
        "number": {
          "description": "the partition number",
          "format": "integer",
          "type": "integer"
        },
        "properties": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "the partition properties",
          "type": "object"
        },
        "size": {
          "description": "the partition size",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "device",
        "filesystem",
        "gptguid",
        "gpttyoe",
        "label",
        "mountoptions",
        "mountpoint",
        "number",
        "properties",
        "size"
      ]
    },
    "v1.MachineFinalizeAllocationRequest": {
      "properties": {
        "bootloaderid": {
          "description": "the bootloader ID",
          "type": "string"
        },
        "cmdline": {
          "description": "the cmdline",
          "type": "string"
        },
        "console_password": {
          "description": "the console password which was generated while provisioning",
          "type": "string"
        },
        "initrd": {
          "description": "the initrd image",
          "type": "string"
        },
        "kernel": {
          "description": "the kernel",
          "type": "string"
        },
        "ospartition": {
          "description": "the partition that has the OS installed",
          "type": "string"
        },
        "primarydisk": {
          "description": "the device name of the primary disk",
          "type": "string"
        }
      },
      "required": [
        "bootloaderid",
        "cmdline",
        "console_password",
        "initrd",
        "kernel",
        "ospartition",
        "primarydisk"
      ]
    },
    "v1.MachineFindRequest": {
      "properties": {
        "allocation_hostname": {
          "type": "string"
        },
        "allocation_image_id": {
          "type": "string"
        },
        "allocation_name": {
          "type": "string"
        },
        "allocation_project": {
          "type": "string"
        },
        "allocation_succeeded": {
          "type": "boolean"
        },
        "disk_names": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "disk_sizes": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "fru_board_mfg": {
          "type": "string"
        },
        "fru_board_mfg_serial": {
          "type": "string"
        },
        "fru_board_part_number": {
          "type": "string"
        },
        "fru_chassis_part_number": {
          "type": "string"
        },
        "fru_chassis_part_serial": {
          "type": "string"
        },
        "fru_product_manufacturer": {
          "type": "string"
        },
        "fru_product_part_number": {
          "type": "string"
        },
        "fru_product_serial": {
          "type": "string"
        },
        "hardware_cpu_cores": {
          "format": "int64",
          "type": "integer"
        },
        "hardware_memory": {
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "type": "string"
        },
        "ipmi_address": {
          "type": "string"
        },
        "ipmi_interface": {
          "type": "string"
        },
        "ipmi_mac_address": {
          "type": "string"
        },
        "ipmi_user": {
          "type": "string"
        },
        "liveliness": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "network_asns": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "network_destination_prefixes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "network_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "network_ips": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "network_nat": {
          "type": "boolean"
        },
        "network_prefixes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "network_private": {
          "type": "boolean"
        },
        "network_underlay": {
          "type": "boolean"
        },
        "network_vrfs": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "nics_mac_addresses": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nics_names": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nics_neighbor_mac_addresses": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nics_neighbor_names": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nics_neighbor_vrfs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nics_vrfs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "partition_id": {
          "type": "string"
        },
        "rackid": {
          "type": "string"
        },
        "sizeid": {
          "type": "string"
        },
        "state_value": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "allocation_hostname",
        "allocation_image_id",
        "allocation_name",
        "allocation_project",
        "allocation_succeeded",
        "disk_names",
        "disk_sizes",
        "fru_board_mfg",
        "fru_board_mfg_serial",
        "fru_board_part_number",
        "fru_chassis_part_number",
        "fru_chassis_part_serial",
        "fru_product_manufacturer",
        "fru_product_part_number",
        "fru_product_serial",
        "hardware_cpu_cores",
        "hardware_memory",
        "id",
        "ipmi_address",
        "ipmi_interface",
        "ipmi_mac_address",
        "ipmi_user",
        "liveliness",
        "name",
        "network_asns",
        "network_destination_prefixes",
        "network_ids",
        "network_ips",
        "network_nat",
        "network_prefixes",
        "network_private",
        "network_underlay",
        "network_vrfs",
        "nics_mac_addresses",
        "nics_names",
        "nics_neighbor_mac_addresses",
        "nics_neighbor_names",
        "nics_neighbor_vrfs",
        "nics_vrfs",
        "partition_id",
        "rackid",
        "sizeid",
        "state_value",
        "tags"
      ]
    },
    "v1.MachineFru": {
      "description": "The Field Replaceable Unit data",
      "properties": {
        "board_mfg": {
          "description": "the board mfg",
          "type": "string"
        },
        "board_mfg_serial": {
          "description": "the board mfg serial",
          "type": "string"
        },
        "board_part_number": {
          "description": "the board part number",
          "type": "string"
        },
        "chassis_part_number": {
          "description": "the chassis part number",
          "type": "string"
        },
        "chassis_part_serial": {
          "description": "the chassis part serial",
          "type": "string"
        },
        "product_manufacturer": {
          "description": "the product manufacturer",
          "type": "string"
        },
        "product_part_number": {
          "description": "the product part number",
          "type": "string"
        },
        "product_serial": {
          "description": "the product serial",
          "type": "string"
        }
      }
    },
    "v1.MachineHardware": {
      "properties": {
        "cpu_cores": {
          "description": "the number of cpu cores",
          "format": "int32",
          "type": "integer"
        },
        "disks": {
          "description": "the list of block devices of this machine",
          "items": {
            "$ref": "#/definitions/v1.MachineBlockDevice"
          },
          "type": "array"
        },
        "memory": {
          "description": "the total memory of the machine",
          "type": "integer"
        },
        "nics": {
          "description": "the list of network interfaces of this machine",
          "items": {
            "$ref": "#/definitions/v1.MachineNic"
          },
          "type": "array"
        }
      },
      "required": [
        "cpu_cores",
        "disks",
        "memory",
        "nics"
      ]
    },
    "v1.MachineHardwareExtended": {
      "properties": {
        "cpu_cores": {
          "description": "the number of cpu cores",
          "format": "int32",
          "type": "integer"
        },
        "disks": {
          "description": "the list of block devices of this machine",
          "items": {
            "$ref": "#/definitions/v1.MachineBlockDevice"
          },
          "type": "array"
        },
        "memory": {
          "description": "the total memory of the machine",
          "type": "integer"
        },
        "nics": {
          "description": "the list of network interfaces of this machine with extended information",
          "items": {
            "$ref": "#/definitions/v1.MachineNicExtended"
          },
          "type": "array"
        }
      },
      "required": [
        "cpu_cores",
        "disks",
        "memory",
        "nics"
      ]
    },
    "v1.MachineIPMI": {
      "description": "The IPMI connection data",
      "properties": {
        "address": {
          "type": "string"
        },
        "bmcversion": {
          "type": "string"
        },
        "fru": {
          "$ref": "#/definitions/v1.MachineFru"
        },
        "interface": {
          "type": "string"
        },
        "mac": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      },
      "required": [
        "address",
        "bmcversion",
        "fru",
        "interface",
        "mac",
        "password",
        "user"
      ]
    },
    "v1.MachineIPMIResponse": {
      "properties": {
        "allocation": {
          "$ref": "#/definitions/v1.MachineAllocation",
          "description": "the allocation data of an allocated machine"
        },
        "bios": {
          "$ref": "#/definitions/v1.MachineBIOS",
          "description": "bios information of this machine"
        },
        "changed": {
          "description": "the last changed timestamp of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "created": {
          "description": "the creation time of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "events": {
          "$ref": "#/definitions/v1.MachineRecentProvisioningEvents",
          "description": "recent events of this machine during provisioning"
        },
        "hardware": {
          "$ref": "#/definitions/v1.MachineHardware",
          "description": "the hardware of this machine"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "ipmi": {
          "$ref": "#/definitions/v1.MachineIPMI",
          "description": "ipmi information of this machine"
        },
        "ledstate": {
          "$ref": "#/definitions/v1.ChassisIdentifyLEDState",
          "description": "the state of this chassis identify LED"
        },
        "liveliness": {
          "description": "the liveliness of this machine",
          "type": "string"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "partition": {
          "$ref": "#/definitions/v1.PartitionResponse",
          "description": "the partition assigned to this machine",
          "readOnly": true
        },
        "rackid": {
          "description": "the rack assigned to this machine",
          "readOnly": true,
          "type": "string"
        },
        "size": {
          "$ref": "#/definitions/v1.SizeResponse",
          "description": "the size of this machine",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/v1.MachineState",
          "description": "the state of this machine"
        },
        "tags": {
          "description": "tags for this machine",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "allocation",
        "bios",
        "changed",
        "created",
        "events",
        "hardware",
        "id",
        "ipmi",
        "ledstate",
        "liveliness",
        "partition",
        "rackid",
        "size",
        "state",
        "tags"
      ]
    },
    "v1.MachineIpmiReport": {
      "properties": {
        "leases": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "the active leases to be reported by a management server",
          "type": "object"
        },
        "partitionid": {
          "description": "the partition id for the ipmi report",
          "type": "string"
        }
      },
      "required": [
        "leases",
        "partitionid"
      ]
    },
    "v1.MachineIpmiReportResponse": {
      "properties": {
        "created": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "the leases that triggered a creation of a machine entity",
          "type": "object"
        },
        "updated": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "the leases that triggered an update of ipmi data",
          "type": "object"
        }
      },
      "required": [
        "created",
        "updated"
      ]
    },
    "v1.MachineNetwork": {
      "description": "prefixes that are reachable within this network",
      "properties": {
        "asn": {
          "description": "ASN number for this network in the bgp configuration",
          "format": "int64",
          "type": "integer"
        },
        "destinationprefixes": {
          "description": "the destination prefixes of this network",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ips": {
          "description": "the ip addresses of the allocated machine in this vrf",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nat": {
          "description": "if set to true, packets leaving this network get masqueraded behind interface ip",
          "type": "boolean"
        },
        "networkid": {
          "description": "the networkID of the allocated machine in this vrf",
          "type": "string"
        },
        "prefixes": {
          "description": "the prefixes of this network",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "private": {
          "description": "indicates whether this network is the private network of this machine",
          "type": "boolean"
        },
        "underlay": {
          "description": "if set to true, this network can be used for underlay communication",
          "type": "boolean"
        },
        "vrf": {
          "description": "the vrf of the allocated machine",
          "format": "integer",
          "type": "integer"
        }
      },
      "required": [
        "asn",
        "destinationprefixes",
        "ips",
        "nat",
        "networkid",
        "prefixes",
        "private",
        "underlay",
        "vrf"
      ]
    },
    "v1.MachineNic": {
      "properties": {
        "mac": {
          "description": "the mac address of this network interface",
          "type": "string"
        },
        "name": {
          "description": "the name of this network interface",
          "type": "string"
        }
      },
      "required": [
        "mac",
        "name"
      ]
    },
    "v1.MachineNicExtended": {
      "properties": {
        "mac": {
          "description": "the mac address of this network interface",
          "type": "string"
        },
        "name": {
          "description": "the name of this network interface",
          "type": "string"
        },
        "neighbors": {
          "description": "the neighbors visible to this network interface",
          "items": {
            "$ref": "#/definitions/v1.MachineNicExtended"
          },
          "type": "array"
        }
      },
      "required": [
        "mac",
        "name",
        "neighbors"
      ]
    },
    "v1.MachineProvisioningEvent": {
      "properties": {
        "event": {
          "description": "the event emitted by the machine",
          "type": "string"
        },
        "message": {
          "description": "an additional message to add to the event",
          "type": "string"
        },
        "time": {
          "description": "the time that this event was received",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "event"
      ]
    },
    "v1.MachineRecentProvisioningEvents": {
      "properties": {
        "incomplete_provisioning_cycles": {
          "description": "the amount of incomplete provisioning cycles in the event container",
          "type": "string"
        },
        "last_event_time": {
          "description": "the time where the last event was received",
          "format": "date-time",
          "type": "string"
        },
        "log": {
          "description": "the log of recent machine provisioning events",
          "items": {
            "$ref": "#/definitions/v1.MachineProvisioningEvent"
          },
          "type": "array"
        }
      },
      "required": [
        "incomplete_provisioning_cycles",
        "last_event_time",
        "log"
      ]
    },
    "v1.MachineRegisterRequest": {
      "properties": {
        "bios": {
          "$ref": "#/definitions/v1.MachineBIOS",
          "description": "bios information of this machine"
        },
        "hardware": {
          "$ref": "#/definitions/v1.MachineHardwareExtended",
          "description": "the hardware of this machine"
        },
        "ipmi": {
          "$ref": "#/definitions/v1.MachineIPMI",
          "description": "the ipmi access infos"
        },
        "partitionid": {
          "description": "the partition id to register this machine with",
          "type": "string"
        },
        "rackid": {
          "description": "the rack id where this machine is connected to",
          "type": "string"
        },
        "tags": {
          "description": "tags for this machine",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "uuid": {
          "description": "the product uuid of the machine to register",
          "type": "string"
        }
      },
      "required": [
        "bios",
        "hardware",
        "ipmi",
        "partitionid",
        "rackid",
        "tags",
        "uuid"
      ]
    },
    "v1.MachineReinstallRequest": {
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "imageid": {
          "description": "the image id to be installed",
          "type": "string"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        }
      },
      "required": [
        "id",
        "imageid"
      ]
    },
    "v1.MachineResponse": {
      "properties": {
        "allocation": {
          "$ref": "#/definitions/v1.MachineAllocation",
          "description": "the allocation data of an allocated machine"
        },
        "bios": {
          "$ref": "#/definitions/v1.MachineBIOS",
          "description": "bios information of this machine"
        },
        "changed": {
          "description": "the last changed timestamp of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "created": {
          "description": "the creation time of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "events": {
          "$ref": "#/definitions/v1.MachineRecentProvisioningEvents",
          "description": "recent events of this machine during provisioning"
        },
        "hardware": {
          "$ref": "#/definitions/v1.MachineHardware",
          "description": "the hardware of this machine"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "ledstate": {
          "$ref": "#/definitions/v1.ChassisIdentifyLEDState",
          "description": "the state of this chassis identify LED"
        },
        "liveliness": {
          "description": "the liveliness of this machine",
          "type": "string"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "partition": {
          "$ref": "#/definitions/v1.PartitionResponse",
          "description": "the partition assigned to this machine",
          "readOnly": true
        },
        "rackid": {
          "description": "the rack assigned to this machine",
          "readOnly": true,
          "type": "string"
        },
        "size": {
          "$ref": "#/definitions/v1.SizeResponse",
          "description": "the size of this machine",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/v1.MachineState",
          "description": "the state of this machine"
        },
        "tags": {
          "description": "tags for this machine",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "allocation",
        "bios",
        "changed",
        "created",
        "events",
        "hardware",
        "id",
        "ledstate",
        "liveliness",
        "partition",
        "rackid",
        "size",
        "state",
        "tags"
      ]
    },
    "v1.MachineState": {
      "properties": {
        "description": {
          "description": "a description why this machine is in the given state",
          "type": "string"
        },
        "value": {
          "description": "the state of this machine. empty means available for all",
          "type": "string"
        }
      },
      "required": [
        "description",
        "value"
      ]
    },
    "v1.Meta": {
      "properties": {
        "apiversion": {
          "type": "string"
        },
        "created_time": {
          "$ref": "#/definitions/timestamp.Timestamp"
        },
        "id": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "updated_time": {
          "$ref": "#/definitions/timestamp.Timestamp"
        },
        "version": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "v1.NetworkAllocateRequest": {
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "free labels that you associate with this network.",
          "type": "object"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "partitionid": {
          "description": "the partition this network belongs to",
          "type": "string"
        },
        "projectid": {
          "description": "the project id this network belongs to, can be empty if globally available",
          "type": "string"
        }
      },
      "required": [
        "labels"
      ]
    },
    "v1.NetworkCreateRequest": {
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "destinationprefixes": {
          "description": "the destination prefixes of this network",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "description": "the unique ID of this entity, auto-generated if left empty",
          "type": "string",
          "uniqueItems": true
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "free labels that you associate with this network.",
          "type": "object"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "nat": {
          "description": "if set to true, packets leaving this network get masqueraded behind interface ip",
          "type": "boolean"
        },
        "parentnetworkid": {
          "description": "the id of the parent network",
          "type": "string"
        },
        "partitionid": {
          "description": "the partition this network belongs to",
          "type": "string"
        },
        "prefixes": {
          "description": "the prefixes of this network",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "privatesuper": {
          "description": "if set to true, this network will serve as a partition's super network for the internal machine networks,there can only be one privatesuper network per partition",
          "type": "boolean"
        },
        "projectid": {
          "description": "the project id this network belongs to, can be empty if globally available",
          "type": "string"
        },
        "underlay": {
          "description": "if set to true, this network can be used for underlay communication",
          "type": "boolean"
        },
        "vrf": {
          "description": "the vrf this network is associated with",
          "format": "integer",
          "type": "integer"
        },
        "vrfshared": {
          "description": "if set to true, given vrf can be used by multiple networks, which is sometimes useful for network partioning (default: false)",
          "type": "boolean"
        }
      },
      "required": [
        "destinationprefixes",
        "id",
        "labels",
        "nat",
        "parentnetworkid",
        "prefixes",
        "privatesuper",
        "underlay"
      ]
    },
    "v1.NetworkFindRequest": {
      "properties": {
        "destinationprefixes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "nat": {
          "type": "boolean"
        },
        "parentnetworkid": {
          "type": "string"
        },
        "partitionid": {
          "type": "string"
        },
        "prefixes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "privatesuper": {
          "type": "boolean"
        },
        "projectid": {
          "type": "string"
        },
        "underlay": {
          "type": "boolean"
        },
        "vrf": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "destinationprefixes",
        "id",
        "labels",
        "name",
        "nat",
        "parentnetworkid",
        "partitionid",
        "prefixes",
        "privatesuper",
        "projectid",
        "underlay",
        "vrf"
      ]
    },
    "v1.NetworkResponse": {
      "properties": {
        "changed": {
          "description": "the last changed timestamp of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "created": {
          "description": "the creation time of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "destinationprefixes": {
          "description": "the destination prefixes of this network",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "free labels that you associate with this network.",
          "type": "object"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "nat": {
          "description": "if set to true, packets leaving this network get masqueraded behind interface ip",
          "type": "boolean"
        },
        "parentnetworkid": {
          "description": "the id of the parent network",
          "type": "string"
        },
        "partitionid": {
          "description": "the partition this network belongs to",
          "type": "string"
        },
        "prefixes": {
          "description": "the prefixes of this network",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "privatesuper": {
          "description": "if set to true, this network will serve as a partition's super network for the internal machine networks,there can only be one privatesuper network per partition",
          "type": "boolean"
        },
        "projectid": {
          "description": "the project id this network belongs to, can be empty if globally available",
          "type": "string"
        },
        "underlay": {
          "description": "if set to true, this network can be used for underlay communication",
          "type": "boolean"
        },
        "usage": {
          "$ref": "#/definitions/v1.NetworkUsage",
          "description": "usage of ips and prefixes in this network"
        },
        "vrf": {
          "description": "the vrf this network is associated with",
          "format": "integer",
          "type": "integer"
        },
        "vrfshared": {
          "description": "if set to true, given vrf can be used by multiple networks, which is sometimes useful for network partioning (default: false)",
          "type": "boolean"
        }
      },
      "required": [
        "changed",
        "created",
        "destinationprefixes",
        "id",
        "labels",
        "nat",
        "parentnetworkid",
        "prefixes",
        "privatesuper",
        "underlay",
        "usage"
      ]
    },
    "v1.NetworkUpdateRequest": {
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "prefixes": {
          "description": "the prefixes of this network",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "id"
      ]
    },
    "v1.NetworkUsage": {
      "properties": {
        "available_ips": {
          "description": "the total available IPs",
          "type": "integer"
        },
        "available_prefixes": {
          "description": "the total available Prefixes",
          "type": "integer"
        },
        "used_ips": {
          "description": "the total used IPs",
          "type": "integer"
        },
        "used_prefixes": {
          "description": "the total used Prefixes",
          "type": "integer"
        }
      },
      "required": [
        "available_ips",
        "available_prefixes",
        "used_ips",
        "used_prefixes"
      ]
    },
    "v1.PartitionBootConfiguration": {
      "description": "a partition has a distinct location in a data center, individual entities belong to a partition",
      "properties": {
        "commandline": {
          "description": "the cmdline to the kernel for the boot image",
          "type": "string"
        },
        "imageurl": {
          "description": "the url to download the initrd for the boot image",
          "type": "string"
        },
        "kernelurl": {
          "description": "the url to download the kernel for the boot image",
          "type": "string"
        }
      }
    },
    "v1.PartitionCapacity": {
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "servers": {
          "description": "servers available in this partition",
          "items": {
            "$ref": "#/definitions/v1.ServerCapacity"
          },
          "type": "array"
        }
      },
      "required": [
        "id",
        "servers"
      ]
    },
    "v1.PartitionCreateRequest": {
      "properties": {
        "bootconfig": {
          "$ref": "#/definitions/v1.PartitionBootConfiguration",
          "description": "the boot configuration of this partition"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "mgmtserviceaddress": {
          "description": "the address to the management service of this partition",
          "type": "string"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "privatenetworkprefixlength": {
          "description": "the length of private networks for the machine's child networks in this partition, default 22",
          "format": "int32",
          "maximum": 30,
          "minimum": 16,
          "type": "integer"
        }
      },
      "required": [
        "bootconfig",
        "id"
      ]
    },
    "v1.PartitionResponse": {
      "properties": {
        "bootconfig": {
          "$ref": "#/definitions/v1.PartitionBootConfiguration",
          "description": "the boot configuration of this partition"
        },
        "changed": {
          "description": "the last changed timestamp of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "created": {
          "description": "the creation time of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "mgmtserviceaddress": {
          "description": "the address to the management service of this partition",
          "type": "string"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "privatenetworkprefixlength": {
          "description": "the length of private networks for the machine's child networks in this partition, default 22",
          "format": "int32",
          "maximum": 30,
          "minimum": 16,
          "type": "integer"
        }
      },
      "required": [
        "bootconfig",
        "changed",
        "created",
        "id"
      ]
    },
    "v1.PartitionUpdateRequest": {
      "properties": {
        "bootconfig": {
          "$ref": "#/definitions/v1.PartitionBootConfiguration",
          "description": "the boot configuration of this partition"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "mgmtserviceaddress": {
          "description": "the address to the management service of this partition",
          "type": "string"
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "v1.ProjectFindRequest": {
      "properties": {
        "description": {
          "$ref": "#/definitions/wrappers.StringValue"
        },
        "id": {
          "$ref": "#/definitions/wrappers.StringValue"
        },
        "name": {
          "$ref": "#/definitions/wrappers.StringValue"
        },
        "tenant_id": {
          "$ref": "#/definitions/wrappers.StringValue"
        }
      }
    },
    "v1.ProjectResponse": {
      "properties": {
        "description": {
          "type": "string"
        },
        "meta": {
          "$ref": "#/definitions/v1.Meta"
        },
        "name": {
          "type": "string"
        },
        "quotas": {
          "$ref": "#/definitions/v1.QuotaSet"
        },
        "tenant_id": {
          "type": "string"
        }
      }
    },
    "v1.Quota": {
      "properties": {
        "quota": {
          "$ref": "#/definitions/wrappers.Int32Value"
        }
      }
    },
    "v1.QuotaSet": {
      "properties": {
        "cluster": {
          "$ref": "#/definitions/v1.Quota"
        },
        "ip": {
          "$ref": "#/definitions/v1.Quota"
        },
        "machine": {
          "$ref": "#/definitions/v1.Quota"
        },
        "project": {
          "$ref": "#/definitions/v1.Quota"
        }
      }
    },
    "v1.ServerCapacity": {
      "properties": {
        "allocated": {
          "description": "allocated servers with this size",
          "format": "int32",
          "type": "integer"
        },
        "faulty": {
          "description": "servers with issues with this size",
          "format": "int32",
          "type": "integer"
        },
        "free": {
          "description": "free servers with this size",
          "format": "int32",
          "type": "integer"
        },
        "size": {
          "description": "the size of the server",
          "type": "string"
        },
        "total": {
          "description": "total amount of servers with this size",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "allocated",
        "faulty",
        "free",
        "size",
        "total"
      ]
    },
    "v1.SizeConstraint": {
      "description": "a machine matches to a size in order to make them easier to categorize",
      "properties": {
        "max": {
          "description": "the maximum value of the constraint",
          "type": "integer"
        },
        "min": {
          "description": "the minimum value of the constraint",
          "type": "integer"
        },
        "type": {
          "description": "the type of the constraint",
          "enum": [
            "cores",
            "memory",
            "storage"
          ],
          "type": "string"
        }
      },
      "required": [
        "max",
        "min",
        "type"
      ]
    },
    "v1.SizeConstraintMatchingLog": {
      "properties": {
        "constraint": {
          "$ref": "#/definitions/v1.SizeConstraint",
          "description": "the size constraint to which this log relates to"
        },
        "log": {
          "description": "a string represention of the matching condition",
          "type": "string"
        },
        "match": {
          "description": "indicates whether the constraint matched or not",
          "type": "boolean"
        }
      },
      "required": [
        "constraint",
        "log",
        "match"
      ]
    },
    "v1.SizeCreateRequest": {
      "properties": {
        "constraints": {
          "description": "a list of constraints that defines this size",
          "items": {
            "$ref": "#/definitions/v1.SizeConstraint"
          },
          "type": "array"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        }
      },
      "required": [
        "constraints",
        "id"
      ]
    },
    "v1.SizeMatchingLog": {
      "properties": {
        "constraints": {
          "items": {
            "$ref": "#/definitions/v1.SizeConstraintMatchingLog"
          },
          "type": "array"
        },
        "log": {
          "type": "string"
        },
        "match": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "constraints",
        "log",
        "match",
        "name"
      ]
    },
    "v1.SizeResponse": {
      "properties": {
        "changed": {
          "description": "the last changed timestamp of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "constraints": {
          "description": "a list of constraints that defines this size",
          "items": {
            "$ref": "#/definitions/v1.SizeConstraint"
          },
          "type": "array"
        },
        "created": {
          "description": "the creation time of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        }
      },
      "required": [
        "changed",
        "constraints",
        "created",
        "id"
      ]
    },
    "v1.SizeUpdateRequest": {
      "properties": {
        "constraints": {
          "description": "a list of constraints that defines this size",
          "items": {
            "$ref": "#/definitions/v1.SizeConstraint"
          },
          "type": "array"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "v1.SwitchConnection": {
      "properties": {
        "machine_id": {
          "description": "the machine id of the machine connected to the nic",
          "type": "string"
        },
        "nic": {
          "$ref": "#/definitions/v1.SwitchNic",
          "description": "a network interface on the switch"
        }
      },
      "required": [
        "nic"
      ]
    },
    "v1.SwitchNic": {
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1.BGPFilter",
          "description": "configures the bgp filter applied at the switch port"
        },
        "mac": {
          "description": "the mac address of this network interface",
          "type": "string"
        },
        "name": {
          "description": "the name of this network interface",
          "type": "string"
        },
        "vrf": {
          "description": "the vrf this network interface is part of",
          "type": "string"
        }
      },
      "required": [
        "mac",
        "name"
      ]
    },
    "v1.SwitchRegisterRequest": {
      "properties": {
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "nics": {
          "description": "the list of network interfaces on the switch",
          "items": {
            "$ref": "#/definitions/v1.SwitchNic"
          },
          "type": "array"
        },
        "partition_id": {
          "description": "the partition in which this switch is located",
          "type": "string"
        },
        "rack_id": {
          "description": "the id of the rack in which this switch is located",
          "type": "string"
        }
      },
      "required": [
        "id",
        "nics",
        "partition_id",
        "rack_id"
      ]
    },
    "v1.SwitchResponse": {
      "properties": {
        "changed": {
          "description": "the last changed timestamp of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "connections": {
          "description": "a connection between a switch port and a machine",
          "items": {
            "$ref": "#/definitions/v1.SwitchConnection"
          },
          "type": "array"
        },
        "created": {
          "description": "the creation time of this entity",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "a description for this entity",
          "type": "string"
        },
        "id": {
          "description": "the unique ID of this entity",
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "description": "a readable name for this entity",
          "type": "string"
        },
        "nics": {
          "description": "the list of network interfaces on the switch",
          "items": {
            "$ref": "#/definitions/v1.SwitchNic"
          },
          "type": "array"
        },
        "partition": {
          "$ref": "#/definitions/v1.PartitionResponse",
          "description": "the partition in which this switch is located"
        },
        "rack_id": {
          "description": "the id of the rack in which this switch is located",
          "type": "string"
        }
      },
      "required": [
        "changed",
        "connections",
        "created",
        "id",
        "nics",
        "partition",
        "rack_id"
      ]
    },
    "wrappers.Int32Value": {
      "properties": {
        "value": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "wrappers.StringValue": {
      "properties": {
        "value": {
          "type": "string"
        }
      }
    }
  },
  "info": {
    "contact": {
      "name": "Metal Stack",
      "url": "https://metal-stack.io"
    },
    "description": "Resource for managing pure metal",
    "license": {
      "name": "MIT",
      "url": "http://mit.org"
    },
    "title": "metal-api",
    "version": "1.0.0"
  },
  "paths": {
    "/v1/firewall": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listFirewalls",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.FirewallResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all known firewalls",
        "tags": [
          "firewall"
        ]
      }
    },
    "/v1/firewall/allocate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "allocateFirewall",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.FirewallCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.FirewallResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "allocate a firewall",
        "tags": [
          "firewall"
        ]
      }
    },
    "/v1/firewall/find": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findFirewalls",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.FirewallFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.FirewallResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find firewalls by multiple criteria",
        "tags": [
          "firewall"
        ]
      }
    },
    "/v1/firewall/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findFirewall",
        "parameters": [
          {
            "description": "identifier of the firewall",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.FirewallResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get firewall by id",
        "tags": [
          "firewall"
        ]
      }
    },
    "/v1/health": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "health",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/rest.status"
            }
          },
          "500": {
            "description": "Unhealthy",
            "schema": {
              "$ref": "#/definitions/rest.status"
            }
          }
        },
        "summary": "perform a healthcheck",
        "tags": [
          "health"
        ]
      }
    },
    "/v1/image": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listImages",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.ImageResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all images",
        "tags": [
          "image"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateImage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ImageUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ImageResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "updates an image. if the image was changed since this one was read, a conflict is returned",
        "tags": [
          "image"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createImage",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ImageCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.ImageResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "create an image. if the given ID already exists a conflict is returned",
        "tags": [
          "image"
        ]
      }
    },
    "/v1/image/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deleteImage",
        "parameters": [
          {
            "description": "identifier of the image",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ImageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "deletes an image and returns the deleted entity",
        "tags": [
          "image"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findImage",
        "parameters": [
          {
            "description": "identifier of the image",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ImageResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get image by id",
        "tags": [
          "image"
        ]
      }
    },
    "/v1/ip": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listIPs",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.IPResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all ips",
        "tags": [
          "ip"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateIP",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.IPUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.IPResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "updates an ip. if the ip was changed since this one was read, a conflict is returned",
        "tags": [
          "ip"
        ]
      }
    },
    "/v1/ip/allocate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "allocateIP",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.IPAllocateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.IPResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "allocate an ip in the given network.",
        "tags": [
          "ip"
        ]
      }
    },
    "/v1/ip/allocate/{ip}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "allocateSpecificIP",
        "parameters": [
          {
            "description": "ip to try to allocate",
            "in": "path",
            "name": "ip",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.IPAllocateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.IPResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "allocate a specific ip in the given network.",
        "tags": [
          "ip"
        ]
      }
    },
    "/v1/ip/find": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findIPs",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.IPFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.IPResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all ips that match given properties",
        "tags": [
          "ip"
        ]
      }
    },
    "/v1/ip/free/{id}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "freeIP",
        "parameters": [
          {
            "description": "identifier of the ip",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.IPResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "frees an ip",
        "tags": [
          "ip"
        ]
      }
    },
    "/v1/ip/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findIP",
        "parameters": [
          {
            "description": "identifier of the ip",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.IPResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get ip by id",
        "tags": [
          "ip"
        ]
      }
    },
    "/v1/machine": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listMachines",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.MachineResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all known machines",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/allocate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "allocateMachine",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.MachineAllocateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "allocate a machine",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/find": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findMachines",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.MachineFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.MachineResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "find machines by multiple criteria",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/ipmi": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "ipmiReport",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.MachineIpmiReport"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineIpmiReportResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "reports IPMI ip addresses leased by a management server for machines",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/ipmi/find": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findIPMIMachines",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.MachineFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.MachineIPMIResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "returns machines including the ipmi connection data",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/register": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "registerMachine",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.MachineRegisterRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "register a machine",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findMachine",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get machine by id",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/abort-reinstall": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "abortReinstallMachine",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.MachineAbortReinstallRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.BootInfo"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "abort reinstall this machine",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/chassis-identify-led-state": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "setChassisIdentifyLEDState",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ChassisIdentifyLEDState"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "set the state of a chassis identify LED",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/event": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "getProvisioningEventContainer",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineRecentProvisioningEvents"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get the current machine provisioning event container",
        "tags": [
          "machine"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "addProvisioningEvent",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.MachineProvisioningEvent"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineRecentProvisioningEvents"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "adds a machine provisioning event",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/finalize-allocation": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "finalizeAllocation",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.MachineFinalizeAllocationRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "finalize the allocation of the machine by reconfiguring the switch, sent on successful image installation",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/free": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "freeMachine",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "free a machine",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/ipmi": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findIPMIMachine",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineIPMIResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "returns a machine including the ipmi connection data",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/power/bios": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "machineBios",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.EmptyBody"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "boots machine into BIOS on next reboot",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/power/chassis-identify-led-off/{description}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "chassisIdentifyLEDOff",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "reason why the chassis identify LED has been turned off",
            "in": "path",
            "name": "description",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.EmptyBody"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "sends a power-off to the chassis identify LED",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/power/chassis-identify-led-on": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "chassisIdentifyLEDOn",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.EmptyBody"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "sends a power-on to the chassis identify LED",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/power/chassis-identify-led-on/{description}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "chassisIdentifyLEDOn",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "reason why the chassis identify LED has been turned on",
            "in": "path",
            "name": "description",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.EmptyBody"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "sends a power-on to the chassis identify LED",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/power/off": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "machineOff",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.EmptyBody"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "sends a power-off to the machine",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/power/on": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "machineOn",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.EmptyBody"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "sends a power-on to the machine",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/power/reset": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "machineReset",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.EmptyBody"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "sends a reset to the machine",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/reinstall": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "reinstallMachine",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.MachineReinstallRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "reinstall this machine",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/state": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "setMachineState",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.MachineState"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "set the state of a machine",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/machine/{id}/wait": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "waitForAllocation",
        "parameters": [
          {
            "description": "identifier of the machine",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.MachineResponse"
            }
          },
          "504": {
            "description": "Timeout",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "wait for an allocation of this machine",
        "tags": [
          "machine"
        ]
      }
    },
    "/v1/network": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listNetworks",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.NetworkResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all networks",
        "tags": [
          "network"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateNetwork",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.NetworkUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.NetworkResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "updates a network. if the network was changed since this one was read, a conflict is returned",
        "tags": [
          "network"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createNetwork",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.NetworkCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.NetworkResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "create a network. if the given ID already exists a conflict is returned",
        "tags": [
          "network"
        ]
      }
    },
    "/v1/network/allocate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "allocateNetwork",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.NetworkAllocateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.NetworkResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "allocates a child network from a partition's private super network",
        "tags": [
          "network"
        ]
      }
    },
    "/v1/network/find": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findNetworks",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.NetworkFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.NetworkResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all networks that match given properties",
        "tags": [
          "network"
        ]
      }
    },
    "/v1/network/free/{id}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "freeNetwork",
        "parameters": [
          {
            "description": "identifier of the network",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.NetworkResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "free a network",
        "tags": [
          "network"
        ]
      }
    },
    "/v1/network/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deleteNetwork",
        "parameters": [
          {
            "description": "identifier of the network",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.NetworkResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "deletes a network and returns the deleted entity",
        "tags": [
          "network"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findNetwork",
        "parameters": [
          {
            "description": "identifier of the network",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.NetworkResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get network by id",
        "tags": [
          "network"
        ]
      }
    },
    "/v1/partition": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listPartitions",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.PartitionResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all Partitions",
        "tags": [
          "Partition"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updatePartition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PartitionUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PartitionResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "updates a Partition. if the Partition was changed since this one was read, a conflict is returned",
        "tags": [
          "Partition"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createPartition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.PartitionCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.PartitionResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "create a Partition. if the given ID already exists a conflict is returned",
        "tags": [
          "Partition"
        ]
      }
    },
    "/v1/partition/capacity": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "partitionCapacity",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.PartitionCapacity"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get Partition capacity",
        "tags": [
          "Partition"
        ]
      }
    },
    "/v1/partition/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deletePartition",
        "parameters": [
          {
            "description": "identifier of the Partition",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PartitionResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "deletes a Partition and returns the deleted entity",
        "tags": [
          "Partition"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findPartition",
        "parameters": [
          {
            "description": "identifier of the Partition",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.PartitionResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get Partition by id",
        "tags": [
          "Partition"
        ]
      }
    },
    "/v1/project": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listProjects",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.ProjectResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all projects",
        "tags": [
          "project"
        ]
      }
    },
    "/v1/project/find": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findProjects",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ProjectFindRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.ProjectResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all projects that match given properties",
        "tags": [
          "project"
        ]
      }
    },
    "/v1/project/{id}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findProject",
        "parameters": [
          {
            "description": "identifier of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.ProjectResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get project by id",
        "tags": [
          "project"
        ]
      }
    },
    "/v1/size": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listSizes",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.SizeResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all sizes",
        "tags": [
          "size"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateSize",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.SizeUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.SizeResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "updates a size. if the size was changed since this one was read, a conflict is returned",
        "tags": [
          "size"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "createSize",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.SizeCreateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.SizeResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "create a size. if the given ID already exists a conflict is returned",
        "tags": [
          "size"
        ]
      }
    },
    "/v1/size/from-hardware": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "fromHardware",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.MachineHardwareExtended"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.SizeMatchingLog"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "Searches all sizes for one to match the given hardwarespecs. If nothing is found, a list of entries is returned which describe the constraint which did not match",
        "tags": [
          "size"
        ]
      }
    },
    "/v1/size/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deleteSize",
        "parameters": [
          {
            "description": "identifier of the size",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.SizeResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "deletes an size and returns the deleted entity",
        "tags": [
          "size"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findSize",
        "parameters": [
          {
            "description": "identifier of the size",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.SizeResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get size by id",
        "tags": [
          "size"
        ]
      }
    },
    "/v1/switch": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "listSwitches",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/v1.SwitchResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get all switches",
        "tags": [
          "switch"
        ]
      }
    },
    "/v1/switch/register": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "registerSwitch",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.SwitchRegisterRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.SwitchResponse"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/v1.SwitchResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "register a switch",
        "tags": [
          "switch"
        ]
      }
    },
    "/v1/switch/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "operationId": "deleteSwitch",
        "parameters": [
          {
            "description": "identifier of the switch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.SwitchResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "deletes an switch and returns the deleted entity",
        "tags": [
          "switch"
        ]
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "findSwitch",
        "parameters": [
          {
            "description": "identifier of the switch",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.SwitchResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/httperrors.HTTPErrorResponse"
            }
          }
        },
        "summary": "get switch by id",
        "tags": [
          "switch"
        ]
      }
    },
    "/v1/version": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "operationId": "info",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/rest.version"
            }
          }
        },
        "summary": "returns the current version information of this module",
        "tags": [
          "version"
        ]
      }
    }
  },
  "security": [
    {
      "Authorization": [
        "HMAC",
        "jwt"
      ]
    }
  ],
  "securityDefinitions": {
    "HMAC": {
      "description": "Generate a 'Authorization: Metal xxxx' header where 'xxxx' is a HMAC generated by the Request-Date, the Request-Method and the Body",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    },
    "jwt": {
      "description": "Add a 'Authorization: Bearer ....' header to the request",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "description": "Managing image entities",
      "name": "image"
    },
    {
      "description": "Managing network entities",
      "name": "network"
    },
    {
      "description": "Managing ip entities",
      "name": "ip"
    },
    {
      "description": "Managing size entities",
      "name": "size"
    },
    {
      "description": "Managing machine entities",
      "name": "machine"
    },
    {
      "description": "Managing partition entities",
      "name": "partition"
    },
    {
      "description": "Managing project entities",
      "name": "project"
    },
    {
      "description": "Managing switch entities",
      "name": "switch"
    }
  ]
}
